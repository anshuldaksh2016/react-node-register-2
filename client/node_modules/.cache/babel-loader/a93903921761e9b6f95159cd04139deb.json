{"ast":null,"code":"var _jsxFileName = \"E:\\\\React stuff\\\\demo1_back\\\\client\\\\src\\\\Registerform.js\";\nimport React from 'react'; // import Recaptcha from 'react-recaptcha';\n\nimport './RegisterForm.css';\nimport axios from 'axios';\nimport { loadReCaptcha } from 'react-recaptcha-google';\nimport { ReCaptcha } from 'react-recaptcha-google';\n\nclass Registerform extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = async e => {\n      e.preventDefault();\n      console.log(this.state);\n      var data = {\n        email: this.state.email\n      };\n\n      if (this.validateForm()) {\n        let fields = {};\n        fields[\"email\"] = \"\";\n        this.setState({\n          fields: fields\n        });\n        fetch('http://localhost:5000/register', {\n          method: 'POST',\n          body: JSON.stringify(data),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }).then(response => response.json()).then(info => {\n          console.log(info);\n        });\n      }\n    };\n\n    this.verifyCaptcha = res => {\n      if (res) {\n        this.setState({\n          human: true,\n          humanKey: res\n        });\n        this.setState({\n          disabled: this.isDisabled()\n        });\n      }\n    };\n\n    this.expireCaptcha = () => {\n      this.setState({\n        human: false,\n        humanKey: null\n      });\n    };\n\n    this.state = {\n      email: '',\n      fields: {},\n      errors: {}\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  } // componentDidMount() {\n  //     const script = document.getElementsByClassName(\"g-recaptcha\")\n  //     script.src = \"https://www.google.com/recaptcha/api.js\";\n  //     script.async = true;\n  //     document.body.appendChild(script);\n  // }\n\n\n  validateForm() {\n    let fields = this.state.fields;\n    let errors = {};\n    let formisValid = true;\n\n    if (!fields[\"email\"]) {\n      formisValid = false;\n      errors[\"email\"] = \"Please Enter your mail-id\";\n    }\n\n    if (typeof fields[\"email\"] !== \"undefined\") {\n      //regular expression for email validation\n      var pattern = new RegExp(/^((\"[\\w-\\s]+\")|([\\w-]+(?:\\.[\\w-]+)*)|(\"[\\w-\\s]+\")([\\w-]+(?:\\.[\\w-]+)*))(@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$)|(@\\[?((25[0-5]\\.|2[0-4][0-9]\\.|1[0-9]{2}\\.|[0-9]{1,2}\\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\]?$)/i);\n\n      if (!pattern.test(fields[\"email\"])) {\n        formisValid = false;\n        errors[\"email\"] = \"*Please enter valid email-ID.\";\n      }\n    }\n\n    this.setState({\n      errors: errors\n    });\n    return formisValid;\n  }\n\n  // handle the state changed \n  handleChange(event) {\n    let fields = this.state.fields;\n    fields[event.target.id] = event.target.value;\n    this.setState({\n      fields // grab the state property\n\n    });\n  }\n\n  componentDidMount() {\n    loadReCaptcha();\n\n    if (this.captchaDemo) {\n      console.log(\"started, just a second...\");\n      this.captchaDemo.reset();\n    }\n\n    ;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-div\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      method: \"post\",\n      action: \"/register\",\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }\n    }, \"Email : \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      id: \"email\",\n      value: this.state.fields.email,\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"errorMsg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 21\n      }\n    }, this.state.errors.email), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Captcha\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ReCaptcha, {\n      size: \"normal\",\n      \"data-theme\": \"dark\",\n      render: \"explicit\",\n      sitekey: \"6Le2qb0ZAAAAAFpP9p0d2QQOf7FBtuZXUryjQ1pP\",\n      onChange: this.verifyCaptcha,\n      onExpired: this.expireCaptcha,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"submit\",\n      id: \"btn\",\n      value: \"Register\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}\n\nexport default Registerform;","map":{"version":3,"sources":["E:/React stuff/demo1_back/client/src/Registerform.js"],"names":["React","axios","loadReCaptcha","ReCaptcha","Registerform","Component","constructor","props","handleSubmit","e","preventDefault","console","log","state","data","email","validateForm","fields","setState","fetch","method","body","JSON","stringify","headers","then","response","json","info","verifyCaptcha","res","human","humanKey","disabled","isDisabled","expireCaptcha","errors","bind","handleChange","formisValid","pattern","RegExp","test","event","target","id","value","componentDidMount","captchaDemo","reset","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\n// import Recaptcha from 'react-recaptcha';\r\nimport './RegisterForm.css';\r\nimport axios from 'axios';\r\nimport { loadReCaptcha } from 'react-recaptcha-google';\r\nimport { ReCaptcha } from 'react-recaptcha-google';\r\n\r\n\r\nclass Registerform extends React.Component {\r\n\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            email: '',\r\n            fields: {},\r\n            errors:{}\r\n        };\r\n        \r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n\r\n    }\r\n    // componentDidMount() {\r\n    //     const script = document.getElementsByClassName(\"g-recaptcha\")\r\n\r\n    //     script.src = \"https://www.google.com/recaptcha/api.js\";\r\n    //     script.async = true;\r\n\r\n    //     document.body.appendChild(script);\r\n    // }\r\n\r\n    validateForm(){\r\n        let fields = this.state.fields;\r\n        let errors = {};\r\n        let formisValid = true;\r\n\r\n        if(!fields[\"email\"]){\r\n            formisValid = false;\r\n            errors[\"email\"] = \"Please Enter your mail-id\";\r\n        }\r\n        if (typeof fields[\"email\"] !== \"undefined\") {\r\n            //regular expression for email validation\r\n            var pattern = new RegExp(/^((\"[\\w-\\s]+\")|([\\w-]+(?:\\.[\\w-]+)*)|(\"[\\w-\\s]+\")([\\w-]+(?:\\.[\\w-]+)*))(@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$)|(@\\[?((25[0-5]\\.|2[0-4][0-9]\\.|1[0-9]{2}\\.|[0-9]{1,2}\\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\]?$)/i);\r\n            if (!pattern.test(fields[\"email\"])) {\r\n                formisValid = false;\r\n                errors[\"email\"] = \"*Please enter valid email-ID.\";\r\n            }\r\n        }\r\n        this.setState({\r\n            errors: errors\r\n        });\r\n        return formisValid;\r\n    }\r\n\r\n    handleSubmit = async e => {\r\n        e.preventDefault();\r\n        console.log(this.state);\r\n        var data = { email: this.state.email };\r\n        if(this.validateForm()){\r\n            let fields = {};\r\n            fields[\"email\"] = \"\";\r\n            this.setState({ fields: fields });\r\n            fetch('http://localhost:5000/register', {\r\n                method: 'POST',\r\n                body: JSON.stringify(data),\r\n                headers: { 'Content-Type': 'application/json' }\r\n            })\r\n                .then(response => response.json())\r\n                .then((info) => { console.log(info) })\r\n        }\r\n        }\r\n\r\n        \r\n       \r\n    \r\n\r\n    \r\n    // handle the state changed \r\n    handleChange(event) {\r\n        let fields = this.state.fields;\r\n        fields[event.target.id]= event.target.value;\r\n        this.setState({\r\n            fields\r\n            // grab the state property\r\n        });\r\n\r\n    }\r\n    componentDidMount() {\r\n        loadReCaptcha();\r\n        if (this.captchaDemo) {\r\n            console.log(\"started, just a second...\")\r\n            this.captchaDemo.reset();\r\n    };\r\n}\r\n    \r\n    verifyCaptcha = (res) => {\r\n        if (res) {\r\n            this.setState({ human: true, humanKey: res })\r\n            this.setState({ disabled: this.isDisabled() })\r\n        }\r\n    }\r\n    expireCaptcha = () => {\r\n        this.setState({ human: false, humanKey: null });\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"form-div\">\r\n                <form method=\"post\" action=\"/register\" onSubmit={this.handleSubmit}>\r\n                    Email : <br />\r\n                    <input \r\n                    type=\"text\" \r\n                    id=\"email\" \r\n                    value={this.state.fields.email}\r\n                    onChange={this.handleChange} \r\n                    />\r\n                    <div className=\"errorMsg\">{this.state.errors.email}</div>\r\n\r\n                    <div className=\"Captcha\">\r\n                        <ReCaptcha\r\n                            size=\"normal\"\r\n                            data-theme=\"dark\"\r\n                            render=\"explicit\"\r\n                            sitekey=\"6Le2qb0ZAAAAAFpP9p0d2QQOf7FBtuZXUryjQ1pP\"\r\n                            onChange={this.verifyCaptcha}\r\n                            onExpired={this.expireCaptcha}\r\n                        />\r\n                    </div>\r\n                    <br />\r\n                    <input type=\"submit\" id=\"btn\" value=\"Register\" />\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Registerform;"]},"metadata":{},"sourceType":"module"}